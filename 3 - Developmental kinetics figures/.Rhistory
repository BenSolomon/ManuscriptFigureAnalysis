??revalue
??relevel
df$phenotype <- relevel(df$phenotype, "WT")
ggplot(df, aes(x = phenotype, y = value)) +
theme_classic() +
stat_summary(fun.y = mean, geom = "bar") +
stat_summary(fun.data = se, geom = "errorbar") +
geom_point(aes(color = experiment)) +
facet_wrap(~ variable, scales = "free")
ggplot(df, aes(x = phenotype, y = value)) +
theme_classic() +
stat_summary(fun.y = mean, geom = "bar") +
stat_summary(fun.data = se, geom = "errorbar") +
geom_point() +
facet_wrap(~ variable, scales = "free")
df <- read.csv("Compiled BATF - Effector - CXCR3neg.csv", header = T)
names(df) <- c("sample", "foxp3.freq", "rorgt.freq", "experiment", "phenotype")
df <- df[1:10,1:5]
df <- melt(df, id.vars = c("sample","experiment", "phenotype"))
# names(df) <- c("sample", "gate", "frequency")
# df$phenotype <- substr(namesplit.f(df$sample, " - ")[,2],1,2)
df$phenotype[df$phenotype == ""] <- "KO"
df$phenotype <- relevel(df$phenotype, "WT")
se <- function(x) {
s <- sd(x)/sqrt(length(x))
m <- mean(x)
data.frame("ymin" = m-s, "ymax" = m+s)
}
# df[,2] <- factor(df[,2], c("WT", "KO"))
dot.size <- 1*max(df$value)/100
cb <- "Set1"
ggplot(df, aes(x = phenotype, y = value)) +
theme_classic() +
stat_summary(fun.y = mean, geom = "bar") +
stat_summary(fun.data = se, geom = "errorbar") +
geom_point() +
facet_wrap(~ variable, scales = "free")
df <- read.csv("Compiled BATF - Effector - CXCR3neg.csv", header = T)
names(df) <- c("sample", "foxp3.freq", "rorgt.freq", "phenotype")
df <- df[1:10,1:4]
df <- melt(df, id.vars = c("sample", "phenotype"))
df$phenotype[df$phenotype == ""] <- "KO"
df$phenotype <- relevel(df$phenotype, "WT")
dot.size <- 1*max(df$value)/100
cb <- "Set1"
ggplot(df, aes(x = phenotype, y = value)) +
theme_classic() +
stat_summary(fun.y = mean, geom = "bar") +
stat_summary(fun.data = se, geom = "errorbar") +
geom_point() +
facet_wrap(~ variable, scales = "free")
setwd("C:/Users/Ben/Dropbox/Hsieh Lab/Data Analysis/Foxp3 RORgt Figures/4 - APC figures/Polyclonal experiments/IRF4")
df <- read.csv("160504 IRF4 compiled - Effector - CXCR3neg.csv", header = T)
names(df) <- c("sample", "foxp3.freq", "rorgt.freq", "experiment", "phenotype")
df <- df[1:10,1:5]
df <- melt(df, id.vars = c("sample","experiment", "phenotype"))
se <- function(x) {
s <- sd(x)/sqrt(length(x))
m <- mean(x)
data.frame("ymin" = m-s, "ymax" = m+s)
}
# df[,2] <- factor(df[,2], c("WT", "KO"))
dot.size <- 1*max(df$value)/100
cb <- "Set1"
ggplot(df, aes(x = phenotype, y = value)) +
theme_classic() +
stat_summary(fun.y = mean, geom = "bar") +
stat_summary(fun.data = se, geom = "errorbar") +
geom_point(aes(color = experiment)) +
facet_wrap(~ variable, scales = "free")
ggplot(df, aes(x = phenotype, y = value)) +
theme_classic() +
stat_summary(fun.y = mean, geom = "bar") +
stat_summary(fun.data = se, geom = "errorbar") +
geom_point() +
facet_wrap(~ variable, scales = "free")
relevel(df$phenotype, "WT")
ggplot(df, aes(x = phenotype, y = value)) +
theme_classic() +
stat_summary(fun.y = mean, geom = "bar") +
stat_summary(fun.data = se, geom = "errorbar") +
geom_point() +
facet_wrap(~ variable, scales = "free")
relevel(df$phenotype, ref = "WT")
df$phenotype <- relevel(df$phenotype, ref = "WT")
ggplot(df, aes(x = phenotype, y = value)) +
theme_classic() +
stat_summary(fun.y = mean, geom = "bar") +
stat_summary(fun.data = se, geom = "errorbar") +
geom_point() +
facet_wrap(~ variable, scales = "free")
df %>% group_by(variable) %>% do(w = wilcox.test(value ~ phenotype, data = .)) %>% summarise(variable, w$p.value)
df <- read.csv("160504 IRF4 compiled - Effector - CXCR3all.csv", header = T)
names(df) <- c("sample", "foxp3.freq", "rorgt.freq", "experiment", "phenotype")
df <- df[1:10,1:5]
df <- melt(df, id.vars = c("sample","experiment", "phenotype"))
# names(df) <- c("sample", "gate", "frequency")
# df$phenotype <- substr(namesplit.f(df$sample, " - ")[,2],1,2)
df$phenotype <- relevel(df$phenotype, ref = "WT")
se <- function(x) {
s <- sd(x)/sqrt(length(x))
m <- mean(x)
data.frame("ymin" = m-s, "ymax" = m+s)
}
# df[,2] <- factor(df[,2], c("WT", "KO"))
dot.size <- 1*max(df$value)/100
cb <- "Set1"
ggplot(df, aes(x = phenotype, y = value)) +
theme_classic() +
stat_summary(fun.y = mean, geom = "bar") +
stat_summary(fun.data = se, geom = "errorbar") +
geom_point() +
facet_wrap(~ variable, scales = "free")
setwd("C:/Users/Ben/Dropbox/Hsieh Lab/Data Analysis/Foxp3 RORgt Figures/4 - APC figures/Polyclonal experiments/Notch2")
df <- read.csv("160506 Notch2 compiled - Effector - CXCR3all.csv", header = T)
names(df) <- c("sample", "foxp3.freq", "rorgt.freq", "phenotype")
df <- df[1:16,1:4]
df <- melt(df, id.vars = c("sample", "phenotype"))
se <- function(x) {
s <- sd(x)/sqrt(length(x))
m <- mean(x)
data.frame("ymin" = m-s, "ymax" = m+s)
}
# df[,2] <- factor(df[,2], c("WT", "KO"))
dot.size <- 1*max(df$value)/100
cb <- "Set1"
ggplot(df, aes(x = phenotype, y = value)) +
theme_classic() +
stat_summary(fun.y = mean, geom = "bar") +
stat_summary(fun.data = se, geom = "errorbar") +
geom_point() +
facet_wrap(~ variable, scales = "free")
df <- read.csv("160506 Notch2 compiled - Effector - CXCR3neg.csv", header = T)
names(df) <- c("sample", "foxp3.freq", "rorgt.freq", "phenotype")
df <- df[1:16,1:4]
df <- melt(df, id.vars = c("sample", "phenotype"))
dot.size <- 1*max(df$value)/100
cb <- "Set1"
ggplot(df, aes(x = phenotype, y = value)) +
theme_classic() +
stat_summary(fun.y = mean, geom = "bar") +
stat_summary(fun.data = se, geom = "errorbar") +
geom_point() +
facet_wrap(~ variable, scales = "free")
df$phenotype <- relevel(df$phenotype, "WT")
df <- read.csv("160506 Notch2 compiled - Effector - CXCR3all.csv", header = T)
names(df) <- c("sample", "foxp3.freq", "rorgt.freq", "phenotype")
df <- df[1:16,1:4]
df <- melt(df, id.vars = c("sample", "phenotype"))
# names(df) <- c("sample", "gate", "frequency")
# df$phenotype <- substr(namesplit.f(df$sample, " - ")[,2],1,2)
se <- function(x) {
s <- sd(x)/sqrt(length(x))
m <- mean(x)
data.frame("ymin" = m-s, "ymax" = m+s)
}
df$phenotype <- relevel(df$phenotype, "WT")
# df[,2] <- factor(df[,2], c("WT", "KO"))
dot.size <- 1*max(df$value)/100
cb <- "Set1"
ggplot(df, aes(x = phenotype, y = value)) +
theme_classic() +
stat_summary(fun.y = mean, geom = "bar") +
stat_summary(fun.data = se, geom = "errorbar") +
geom_point() +
facet_wrap(~ variable, scales = "free")
df <- read.csv("160506 Notch2 compiled - Effector - CXCR3neg.csv", header = T)
names(df) <- c("sample", "foxp3.freq", "rorgt.freq", "phenotype")
df <- df[1:16,1:4]
df <- melt(df, id.vars = c("sample", "phenotype"))
# names(df) <- c("sample", "gate", "frequency")
# df$phenotype <- substr(namesplit.f(df$sample, " - ")[,2],1,2)
se <- function(x) {
s <- sd(x)/sqrt(length(x))
m <- mean(x)
data.frame("ymin" = m-s, "ymax" = m+s)
}
df$phenotype <- relevel(df$phenotype, "WT")
# df[,2] <- factor(df[,2], c("WT", "KO"))
dot.size <- 1*max(df$value)/100
cb <- "Set1"
ggplot(df, aes(x = phenotype, y = value)) +
theme_classic() +
stat_summary(fun.y = mean, geom = "bar") +
stat_summary(fun.data = se, geom = "errorbar") +
geom_point() +
facet_wrap(~ variable, scales = "free")
setwd("C:/Users/Ben/Dropbox/Hsieh Lab/Data Analysis/160323 - huLang")
df <- read.csv("huLangBatf - All - CXCR3all.csv", header = T)
names(df) <- c("sample", "FOXall", "RORinFOX")
df <- df[1:9,1:3]
df <- melt(df)
names(df) <- c("sample", "gate", "frequency")
df$phenotype <- namesplit.f(df$sample, " - ")[,2]
df$phenotype <- substring(df$phenotype, 1, nchar(df$phenotype) - 4)
se <- function(x) {
s <- sd(x)/sqrt(length(x))
m <- mean(x)
data.frame("ymin" = m-s, "ymax" = m+s)
}
# df[,2] <- factor(df[,2], c("WT", "KO"))
dot.size <- 1*max(df$frequency)/100
cb <- "Set1"
ggplot(df, aes(x = phenotype, y = frequency)) +
theme_classic() +
stat_summary(fun.y = mean, geom = "bar") +
stat_summary(fun.data = se, geom = "errorbar") +
geom_point() +
theme(axis.text.x = element_text(angle = 90)) +
facet_wrap(~ gate, scales = "free")
df <- subset(df, phenotyp != "LangKO BatfWT")
df <- subset(df, phenotype != "LangKO BatfWT")
se <- function(x) {
s <- sd(x)/sqrt(length(x))
m <- mean(x)
data.frame("ymin" = m-s, "ymax" = m+s)
}
# df[,2] <- factor(df[,2], c("WT", "KO"))
dot.size <- 1*max(df$frequency)/100
cb <- "Set1"
ggplot(df, aes(x = phenotype, y = frequency)) +
theme_classic() +
stat_summary(fun.y = mean, geom = "bar") +
stat_summary(fun.data = se, geom = "errorbar") +
geom_point() +
theme(axis.text.x = element_text(angle = 90)) +
facet_wrap(~ gate, scales = "free")
df$phenotype <- relevel(df$phenotype ,"LangWT BatfWT")
df$phenotype <- relevel(factor(df$phenotype) ,"LangWT BatfWT")
ggplot(df, aes(x = phenotype, y = frequency)) +
theme_classic() +
stat_summary(fun.y = mean, geom = "bar") +
stat_summary(fun.data = se, geom = "errorbar") +
geom_point() +
theme(axis.text.x = element_text(angle = 90)) +
facet_wrap(~ gate, scales = "free")
df <- read.csv("huLangBatf - All - CXCR3neg.csv", header = T)
names(df) <- c("sample", "FOXall", "RORinFOX")
df <- df[1:9,1:3]
df <- melt(df)
names(df) <- c("sample", "gate", "frequency")
df$phenotype <- namesplit.f(df$sample, " - ")[,2]
df$phenotype <- substring(df$phenotype, 1, nchar(df$phenotype) - 4)
df <- subset(df, phenotype != "LangKO BatfWT")
df$phenotype <- relevel(factor(df$phenotype) ,"LangWT BatfWT")
se <- function(x) {
s <- sd(x)/sqrt(length(x))
m <- mean(x)
data.frame("ymin" = m-s, "ymax" = m+s)
}
# df[,2] <- factor(df[,2], c("WT", "KO"))
dot.size <- 1*max(df$frequency)/100
cb <- "Set1"
ggplot(df, aes(x = phenotype, y = frequency)) +
theme_classic() +
stat_summary(fun.y = mean, geom = "bar") +
stat_summary(fun.data = se, geom = "errorbar") +
geom_point() +
theme(axis.text.x = element_text(angle = 90)) +
facet_wrap(~ gate, scales = "free")
setwd("C:/Users/Ben/Dropbox/Hsieh Lab/Data Analysis/160314 - CX3CR1 GKO")
df <- read.csv("CX3CR1 - All - CXCR3all.csv", header = T)
names(df) <- c("sample", "foxp3.freq", "rorgt.freq")
df <- df[1:6,1:3]
df <- melt(df)
names(df) <- c("sample", "gate", "frequency")
df$phenotype <- substr(namesplit.f(df$sample, " - ")[,2],1,3)
se <- function(x) {
s <- sd(x)/sqrt(length(x))
m <- mean(x)
data.frame("ymin" = m-s, "ymax" = m+s)
}
# df[,2] <- factor(df[,2], c("WT", "KO"))
dot.size <- 1*max(df$frequency)/100
cb <- "Set1"
ggplot(df, aes(x = phenotype, y = frequency)) +
theme_classic() +
stat_summary(fun.y = mean, geom = "bar") +
stat_summary(fun.data = se, geom = "errorbar") +
geom_point() +
facet_wrap(~ gate, scales = "free")
df$phenotype <- relevel(factor(df$phenotype), "WT_")
ggplot(df, aes(x = phenotype, y = frequency)) +
theme_classic() +
stat_summary(fun.y = mean, geom = "bar") +
stat_summary(fun.data = se, geom = "errorbar") +
geom_point() +
facet_wrap(~ gate, scales = "free")
df <- read.csv("CX3CR1 - All - CXCR3neg.csv", header = T)
names(df) <- c("sample", "foxp3.freq", "rorgt.freq")
df <- df[1:6,1:3]
df <- melt(df)
names(df) <- c("sample", "gate", "frequency")
df$phenotype <- substr(namesplit.f(df$sample, " - ")[,2],1,3)
df$phenotype <- relevel(factor(df$phenotype), "WT_")
se <- function(x) {
s <- sd(x)/sqrt(length(x))
m <- mean(x)
data.frame("ymin" = m-s, "ymax" = m+s)
}
# df[,2] <- factor(df[,2], c("WT", "KO"))
dot.size <- 1*max(df$frequency)/100
cb <- "Set1"
ggplot(df, aes(x = phenotype, y = frequency)) +
theme_classic() +
stat_summary(fun.y = mean, geom = "bar") +
stat_summary(fun.data = se, geom = "errorbar") +
geom_point() +
facet_wrap(~ gate, scales = "free")
setwd("C:/Users/Ben/Dropbox/Hsieh Lab/Data Analysis/Foxp3 RORgt Figures/3 - Developmental kinetics figures")
df <- read.csv("Polyclonal transfer kinetics - All - CXCR3all.csv", header = T)
df <- df[,-12]
df <- df[1:23,]
df <- melt(df, id.vars = c("X", "Experiment", "Tissue", "Day"), variable.name = "gate", value.name = "frequency")
names(df) <- c("sample", "experiment", "tissue", "day", "gate", "frequency")
df$day <- gsub("d", "", df$day)
df$day <- as.numeric(df$day)
# df$day[df$day == 8] <- 7 #Combines d7 and d8
# df$day[df$day == 23] <- 21 #Combines d21 and d23
# df <- subset(df, day !=16) #Removes d16, since it only has data from 1 out of 3 replicates
df$day[df$day == 9] <- 6 #Combines d6 and d9
# df$day[df$day == 23] <- 21 #Combines d21 and d23
df <- subset(df, day !=16) #Removes d16, since it only has data from 1 out of 3 replicates
# #Plotting all gates, via facet
# ggplot(df, aes(x = day, y = frequency)) +
#   theme_classic() +
#   geom_point() +
#   stat_summary(fun.y = mean, geom = "line") +
#   # stat_summary(fun.data = se, geom = "errorbar", width = 0.25, size = 1)  +
#   facet_grid(.~gate)
#
# summary <-df %>% group_by(gate, day) %>% summarise(mean(frequency))
#Plotting Foxp3 vs RORgt
df.1 <- subset(df, gate %in% c("FOXonly", "FOXandROR", "RORonly"))
ggplot(df.1, aes(x = day, y = frequency)) +
theme_classic() +
# geom_point() +
stat_summary(fun.data = se, geom = "ribbon", aes(group = gate)) +
stat_summary(fun.y = mean, geom = "line", aes(color = gate)) +
facet_wrap(~ tissue, scales = "free")
View(df)
df <- subset(df, day == 20)
ggplot(df, aes(x = tissue, y = frequency)) +
theme_classic() +
stat_summary(fun.y = mean, geom = "bar") +
stat_summary(fun.data = se, geom = "errorbar") +
geom_point() +
facet_wrap(~ gate, scales = "free")
ggplot(df, aes(x = tissue, y = frequency)) +
theme_classic() +
stat_summary(fun.y = mean, geom = "bar") +
stat_summary(fun.data = se, geom = "errorbar") +
geom_point()
df <- subset(df, day == 20 & gate == "RORinFOX")
ggplot(df, aes(x = tissue, y = frequency)) +
theme_classic() +
stat_summary(fun.y = mean, geom = "bar") +
stat_summary(fun.data = se, geom = "errorbar") +
geom_point() +
facet_wrap(~ gate, scales = "free")
df <- read.csv("Polyclonal transfer kinetics - All - CXCR3all.csv", header = T)
df <- df[,-12]
df <- df[1:23,]
df <- melt(df, id.vars = c("X", "Experiment", "Tissue", "Day"), variable.name = "gate", value.name = "frequency")
names(df) <- c("sample", "experiment", "tissue", "day", "gate", "frequency")
df$day <- gsub("d", "", df$day)
df$day <- as.numeric(df$day)
df <- subset(df, (day == 20 | day == 15 | day == 16) & gate == "RORinFOX")
View(df)
df <- df[,-12]
df <- df[1:23,]
df <- melt(df, id.vars = c("X", "Experiment", "Tissue", "Day"), variable.name = "gate", value.name = "frequency")
names(df) <- c("sample", "experiment", "tissue", "day", "gate", "frequency")
df$day <- gsub("d", "", df$day)
df$day <- as.numeric(df$day)
df <- read.csv("Polyclonal transfer kinetics - All - CXCR3all.csv", header = T)
df <- df[,-12]
df <- df[1:23,]
df <- melt(df, id.vars = c("X", "Experiment", "Tissue", "Day"), variable.name = "gate", value.name = "frequency")
names(df) <- c("sample", "experiment", "tissue", "day", "gate", "frequency")
df$day <- gsub("d", "", df$day)
df$day <- as.numeric(df$day)
View(df)
levels(df$day)
levels(factor(df$day))
df <- subset(df, (day == 20 | day == 15 | day == 16) & gate == "RORinFOX")
ggplot(df, aes(x = tissue, y = frequency)) +
theme_classic() +
stat_summary(fun.y = mean, geom = "bar") +
stat_summary(fun.data = se, geom = "errorbar") +
geom_point() +
facet_wrap(~ gate, scales = "free")
ggplot(df, aes(x = tissue, y = frequency)) +
theme_classic() +
stat_summary(fun.y = mean, geom = "bar") +
stat_summary(fun.data = se, geom = "errorbar") +
geom_point()
df <- read.csv("C:/Users/Ben/Dropbox/Hsieh Lab/Data Analysis/Foxp3 RORgt Figures/CleanedFoxp3RORgt.csv")
df.c <- dcast(df, trvcdr3 ~ mouseNum + tissue + population, fun.aggregate = sum, value.var = "numReads")
df.c <- as.data.frame(t(df.c[,-1]))
df.even <- renyi(df.c)
library(vegan)
df.even <- renyi(df.c)
View(df.even)
seq(0,10, 20)
seq(0,10, length.out = 20)
df.even <- renyi(df.c, scales = seq(0,10, length.out = 20)))
df.even <- renyi(df.c, scales = seq(0,10, length.out = 20))
View(df.even)
for (i in 2:20){}
cbind(df.even, df.even[,i]/df.even[,1])
}
for (i in 2:20){
cbind(df.even, df.even[,i]/df.even[,1])
}
for (i in 2:20){
df.even <- cbind(df.even, df.even[,i]/df.even[,1])
}
df.even <- df.even[,21:39]
df.even$sample <- rownames(df.even)
df.even <- melt(df.even, id.vars = "sample")
df.even$tissue <- namesplit.f(df.even$sample, "_")[,2]
df.even$population <- namesplit.f(df.even$sample, "_")[,3]
df.even <- renyi(df.c, scales = seq(0,10, length.out = 20))
names(df.even) <- c("q0", "q1", "q2")
for (i in 2:20){
df.even <- cbind(df.even, df.even[,i]/df.even[,1])
}
# df.even$RLE01 <- df.even$q1/df.even$q0
# df.even$RLE12 <- df.even$q2/df.even$q1
df.even <- df.even[,21:39]
names(df.even) <- 1:ncol(df.even)
View(df.even)
df.even$sample <- rownames(df.even)
df.even <- melt(df.even, id.vars = "sample")
df.even$tissue <- namesplit.f(df.even$sample, "_")[,2]
df.even$population <- namesplit.f(df.even$sample, "_")[,3]
df.even <- renyi(df.c, scales = seq(0,10, length.out = 20))
names(df.even) <- c("q0", "q1", "q2")
for (i in 2:20){
df.even <- cbind(df.even, df.even[,i]/df.even[,1])
}
# df.even$RLE01 <- df.even$q1/df.even$q0
# df.even$RLE12 <- df.even$q2/df.even$q1
df.even <- df.even[,21:39]
names(df.even) <- 1:ncol(df.even)
plot(hclust(dist(df.even)))
df.even <- renyi(df.c, scales = seq(0,10, length.out = 50))
names(df.even) <- c("q0", "q1", "q2")
for (i in 2:50){
df.even <- cbind(df.even, df.even[,i]/df.even[,1])
}
# df.even$RLE01 <- df.even$q1/df.even$q0
# df.even$RLE12 <- df.even$q2/df.even$q1
df.even <- df.even[,21:39]
names(df.even) <- 1:ncol(df.even)
plot(hclust(dist(df.even)))
x <- pvclust(df.even, nboot = 50)
library(pvclust)
x <- pvclust(df.even, nboot = 50)
plot(x)
x <- pvclust(t(df.even), nboot = 50)
plot(x)
plot(hclust(dist(df.even)))
cor(df.even)
cor(t(df.even))
min(cor(t(df.even)))
df.even <- renyi(df.c, scales = seq(1,10, length.out = 50))
names(df.even) <- c("q0", "q1", "q2")
for (i in 2:50){
df.even <- cbind(df.even, df.even[,i]/df.even[,1])
}
df.even <- df.even[,21:39]
names(df.even) <- 1:ncol(df.even)
plot(hclust(dist(df.even)))
min(cor(t(df.even)))
df.even <- renyi(df.c, scales = seq(1,10, length.out = 10))
# names(df.even) <- c("q0", "q1", "q2")
for (i in 2:10){
df.even <- cbind(df.even, df.even[,i]/df.even[,1])
}
# df.even$RLE01 <- df.even$q1/df.even$q0
# df.even$RLE12 <- df.even$q2/df.even$q1
df.even <- df.even[,21:39]
names(df.even) <- 1:ncol(df.even)
plot(hclust(dist(df.even)))
# x <- pvclust(t(df.even), nboot = 50)
# plot(x)
min(cor(t(df.even)))
head(melt(df.even))
df.plot <- df.even
df.plot$sample <- rownames(df.plot)
head(melt(df.even, id.vars = c("sample")))
head(melt(df.plot, id.vars = c("sample")))
plot(df.plot, aes(x = variable, y = value)) + geom_path(aes(color = sample))
ggplot(df.plot, aes(x = variable, y = value)) + geom_path(aes(color = sample))
View(df.plot)
df.plot <- melt(df.plot, id.vars = c("sample"))
ggplot(df.plot, aes(x = variable, y = value)) + geom_path(aes(color = sample))
ggplot(df.plot, aes(x = variable, y = value)) +
stat_summary(fun.y = mean, geom = "path")
ggplot(df.plot, aes = variable, y = value)) +
geom_point()
ggplot(df.plot, (aes = variable, y = value)) +
geom_point()
ggplot(df.plot, aes(x= variable, y = value)) +
geom_point()
View(df.even)
df.even <- renyi(df.c, scales = seq(1,10, length.out = 10))
df.even <- renyi(df.c, scales = seq(0,10, length.out = 50))
plot(hclust(dist(df.even)))
min(cor(t(df.even)))
